# ------------------------------------------------------------
# Pretty helpers
# ------------------------------------------------------------
__c_reset='\033[0m'; __c_green='\033[0;32m'; __c_yellow='\033[1;33m'; __c_red='\033[0;31m'; __c_cyan='\033[1;36m'
__say() { printf "%b%s%b\n" "$__c_cyan" "$*" "$__c_reset"; }
__ok()  { printf "%b%s%b\n" "$__c_green" "$*" "$__c_reset"; }
__warn(){ printf "%b%s%b\n" "$__c_yellow" "$*" "$__c_reset"; }
__err() { printf "%b%s%b\n" "$__c_red"   "$*" "$__c_reset" >&2; }

hideDesktopEntry() {
        file_name=$1
        if [ -f /usr/share/applications/$file_name.desktop ]; then
                cp /usr/share/applications/$file_name.desktop ~/.local/share/applications/$file_name.desktop
                sudo rm /usr/share/applications/$file_name.desktop
                sudo ln -s /dev/null /usr/share/applications/$file_name.desktop
                echo NoDisplay=true >> ~/.local/share/applications/$file_name.desktop
                echo "Done! Hid $file_name"
        else
                echo "File $file_name.desktop does not exist."
        fi
}

# Write iso file to sd card
iso2sd() {
  if [ $# -ne 2 ]; then
    echo "Usage: iso2sd <input_file> <output_device>"
    echo "Example: iso2sd ~/Downloads/ubuntu-25.04-desktop-amd64.iso /dev/sda"
    echo -e "\nAvailable SD cards:"
    lsblk -d -o NAME | grep -E '^sd[a-z]' | awk '{print "/dev/"$1}'
  else
    sudo dd bs=4M status=progress oflag=sync if="$1" of="$2"
    sudo eject $2
  fi
}

compress() {
  tar -czf "${1%/}.tar.gz" "${1%/}";
}
# Transcode a video to a good-balance 1080p that's great for sharing online
transcode-video-1080p() {
  ffmpeg -i $1 -vf scale=1920:1080 -c:v libx264 -preset fast -crf 23 -c:a copy ${1%.*}-1080p.mp4
}

# Transcode a video to a good-balance 4K that's great for sharing online
transcode-video-4K() {
  ffmpeg -i $1 -c:v libx265 -preset slow -crf 24 -c:a aac -b:a 192k ${1%.*}-optimized.mp4
}

# Transcode any image to JPG image that's great for shrinking wallpapers
img2jpg() {
  magick $1 -quality 95 -strip ${1%.*}.jpg
}

# Transcode any image to JPG image that's great for sharing online without being too big
img2jpg-small() {
  magick $1 -resize 1080x\> -quality 95 -strip ${1%.*}.jpg
}

# Transcode any image to compressed-but-lossless PNG
img2png() {
  magick "$1" -strip -define png:compression-filter=5 \
    -define png:compression-level=9 \
    -define png:compression-strategy=1 \
    -define png:exclude-chunk=all \
    "${1%.*}.png"
}

sysinfo() {
  local use_color=1
  [[ "${1:-}" == "--no-color" ]] && use_color=0

  local C R; if ((use_color)); then C="$__c_cyan"; R="$__c_reset"; else C=""; R=""; fi

  # OS
  local os; if [[ -r /etc/os-release ]]; then
    # shellcheck disable=SC1091
    . /etc/os-release
    os="${NAME:-Linux} ($(uname -m))"
  else
    os="$(uname -s) $(uname -m)"
  fi

  # Host
  local host_model="Unknown"
  if [[ -r /sys/class/dmi/id/product_name ]]; then
    host_model="$(< /sys/class/dmi/id/product_name)"
    [[ -r /sys/class/dmi/id/product_version ]] && host_model+=" $(< /sys/class/dmi/id/product_version)"
  fi

  # Kernel
  local kernel="Linux $(uname -r)"

  # Uptime
  local up_s hours mins
  up_s=$(awk '{print int($1)}' /proc/uptime)
  hours=$((up_s/3600)); mins=$(((up_s%3600)/60))
  local uptime=""; ((hours>0)) && uptime+="${hours} hour$([[ $hours -ne 1 ]] && echo s)"
  ((hours>0 && mins>0)) && uptime+=", "
  ((mins>0)) && uptime+="${mins} min$([[ $mins -ne 1 ]] && echo s)"

  # Packages
  local pkg_count="N/A"
  if command -v pacman >/dev/null 2>&1; then
    pkg_count="$(pacman -Q 2>/dev/null | wc -l | tr -d ' ') (pacman)"
  fi

  # Shell
  local shell="unknown"
  if [[ -n "$BASH_VERSION" ]]; then
    shell="bash $BASH_VERSION"
  else
    shell="$(basename -- "$SHELL")"
  fi

  # Desktop/WM
  local desktop="N/A"
  [[ -n "$XDG_CURRENT_DESKTOP" ]] && desktop="$XDG_CURRENT_DESKTOP"
  [[ -n "$DESKTOP_SESSION" && "$desktop" == "N/A" ]] && desktop="$DESKTOP_SESSION"

  # CPU
  local cpu_model cpu_cores cpu_speed
  cpu_model="$(awk -F: '/model name/ {gsub(/^ +/,"",$2); print $2; exit}' /proc/cpuinfo)"
  cpu_cores="$(grep -c '^processor' /proc/cpuinfo)"
  cpu_speed="$(awk -F: '/cpu MHz/ {printf "%.2f",$2/1000; exit}' /proc/cpuinfo)"
  [[ -z "$cpu_speed" ]] && cpu_speed="N/A"
  local cpu="${cpu_model:-N/A} (${cpu_cores:-?}) @ ${cpu_speed} GHz"

  # Memory
  # Use /proc/meminfo for accuracy; show used = MemTotal - MemAvailable
  local mt ma mu mem_p
  mt=$(awk '/MemTotal:/ {print $2}' /proc/meminfo)      # kB
  ma=$(awk '/MemAvailable:/ {print $2}' /proc/meminfo)  # kB
  mu=$((mt - ma))
  mem_p=$(( mu * 100 / mt ))
  # to GiB with one decimal
  printf -v mem_str "%.1f GiB / %.1f GiB (%d%%)" "$((mu/1024))e-3" "$((mt/1024))e-3" "$mem_p"

  # Swap
  local st su sp; st=$(awk '/SwapTotal:/ {print $2}' /proc/meminfo); su=$(awk '/SwapFree:/ {print $2}' /proc/meminfo)
  sp=0; ((st>0)) && sp=$(( (st - su) * 100 / st ))
  printf -v swap_str "%.1f GiB / %.1f GiB (%d%%)" "$(((st - su)/1024))e-3" "$((st/1024))e-3" "$sp"

  # Disk (root)
  local total used percent mount fs_type
  read -r total used percent mount <<<"$(df -BG / | awk 'NR==2{print $2,$3,$5,$6}')"
  fs_type="$(df -T / | awk 'NR==2{print $2}')"
  local disk="${used} / ${total} (${percent}) - ${fs_type}"

  # Locale
  local locale="$LANG"

  # Print
  printf "${C}OS:${R} %s\n" "$os"
  printf "${C}Host:${R} %s\n" "$host_model"
  printf "${C}Kernel:${R} %s\n" "$kernel"
  printf "${C}Uptime:${R} %s\n" "$uptime"
  printf "${C}Packages:${R} %s\n" "$pkg_count"
  printf "${C}Shell:${R} %s\n" "$shell"
  printf "${C}WM:${R} %s\n" "$desktop"
  printf "${C}CPU:${R} %s\n" "$cpu"
  printf "${C}Memory:${R} %s\n" "$mem_str"
  printf "${C}Swap:${R} %s\n" "$swap_str"
  printf "${C}Disk (%s):${R} %s\n" "${mount:-/}" "$disk"
  printf "${C}Locale:${R} %s\n" "$locale"
}
